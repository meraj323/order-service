<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<!-- <version>2.3.1.RELEASE</version> -->
		<version>2.1.5.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.cts</groupId>
	<artifactId>order-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>order-service</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>
	<dependencies>
	<!-- Set the Tomcat server dependency to provide for external tomcat: -->
<!-- 	 <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
     </dependency> -->
     
        
	
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-mongodb</artifactId>
		</dependency>
		<!-- Spring cloud with Kafka for asyncoronous communication with microservice -->
<!-- 		<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-stream-kafka</artifactId>
		</dependency>
		
		<dependency>
    		<groupId>org.slf4j</groupId>
    		<artifactId>slf4j-api</artifactId>
		</dependency> -->
		<!-- Spring cloud end  -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>2.2.6.RELEASE</version>
		<!-- 	<exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions> -->
		</dependency>
		
		
		<dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
		<dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
           <groupId>com.fasterxml.jackson.core</groupId>
           <artifactId>jackson-databind</artifactId>
        </dependency>
        
        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
        <dependency>
           <groupId>org.junit.jupiter</groupId>
           <artifactId>junit-jupiter-api</artifactId>
           <version>5.6.0</version>
           <scope>test</scope>
        </dependency>
        
        <!-- 
             Spring Boot Actuator:
             Monitoring our app, gathering metrics, understanding traffic, or the state of our database becomes trivial with this dependency.
             The main benefit of this library is that we can get production-grade tools without having to actually implement these features ourselves.
             Actuator is mainly used to expose operational information about the running application – health, metrics, info, dump, env, etc. 
             It uses HTTP endpoints or JMX beans to enable us to interact with it.
             
             Actuator comes with most endpoints disabled.
             only two available by default are /health and /info, only two are by default enable, /health and /info!!!
             How to enable all Actuator endpoints??
             Step 1: management.endpoints.web.exposure.include=*
             Step 2: If you want to enable some specific endpoint,
                     management.endpoints.web.exposure.include=<<Endpoint name>>
             Step 3: If you want to exclude specific endpoint
                     management.endpoints.web.exposure.exclude=<<Endpoint name>>        
             Step 4: If you want to enable specific endpoints like below list of endpoints
             /auditevents – lists security audit-related events such as user login/logout. Also, we can filter by principal or type among other fields
             /beans – returns all available beans in our BeanFactory. Unlike /auditevents, it doesn't support filtering
             /conditions – formerly known as /autoconfig, builds a report of conditions around auto-configuration
             /configprops – allows us to fetch all @ConfigurationProperties beans
             /env – returns the current environment properties. Additionally, we can retrieve single properties
             /flyway – provides details about our Flyway database migrations
             /health – summarises the health status of our application
             /heapdump – builds and returns a heap dump from the JVM used by our application
             /info – returns general information. It might be custom data, build information or details about the latest commit
             /liquibase – behaves like /flyway but for Liquibase
             /logfile – returns ordinary application logs
             /loggers – enables us to query and modify the logging level of our application
             /metrics – details metrics of our application. This might include generic metrics as well as custom ones.
                        The metrics endpoint publishes information about OS, JVM as well as application-level metrics.
                        
             /prometheus – returns metrics like the previous one, but formatted to work with a Prometheus server
             /scheduledtasks – provides details about every scheduled task within our application
             /sessions – lists HTTP sessions given we are using Spring Session
             /shutdown – performs a graceful shutdown of the application
             /threaddump – dumps the thread information of the underlying JVM
             -->
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        
        
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto -->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-crypto</artifactId>
    <!-- <version>5.3.3.RELEASE</version> -->
</dependency>
</dependencies>
    <!-- We have to set the path from cmd like spring.profiles.active = dev or stage or prod for specific enviorment
         The respective profile it will take!!!
     -->
<!--     <profiles>
      <profile>
        <id>dev</id>
        <activation>
            <activeByDefault>true</activeByDefault>
        </activation>
        <properties>
            <spring.profiles.active>dev</spring.profiles.active>
        </properties>
    </profile>
    
        <profile>
        <id>stage</id>
        <properties>
            <spring.profiles.active>stage</spring.profiles.active>
        </properties>
    </profile>
    
    <profile>
        <id>prod</id>
        <properties>
            <spring.profiles.active>prod</spring.profiles.active>
        </properties>
    </profile>
</profiles> -->


	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
<!-- 				<configuration>
                     <profiles>
                        <profile>dev</profile>
                     </profiles>
               </configuration> -->
			</plugin>
			<plugin>
			    <artifactId>maven-surefire-plugin</artifactId>
			    <version>2.21.0</version>
			    <!-- <configuration>
                    <excludes>
                        <exclude>DataTest.java</exclude>
                    </excludes>
                    <includes>
                        <include>DataCheck.java</include>
                    </includes>
                </configuration> -->
           </plugin>
		</plugins>
	</build>
	
		<!-- 	
		<resources>
        <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
        </resource>
    </resources> -->

</project>
